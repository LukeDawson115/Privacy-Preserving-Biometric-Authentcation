{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN2ulzOWGl3i0HCaHIyizTg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LukeDawson115/Privacy-Preserving-Biometric-Authentcation/blob/main/PPBA_V2.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vi3pHgveNX76",
        "outputId": "11c2e4f5-3da2-444e-9f8b-acd1a1086ed7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: TenSEAL in /usr/local/lib/python3.10/dist-packages (0.3.14)\n",
            "Please enter your biometric data as 5 numbers separated by space (each number represents a biometric point):\n",
            "12.3 34.6 45.3 2 100\n",
            "Input Fingerprint Data: [0.12300000000000001, 0.34600000000000003, 0.45299999999999996, 0.02, 1.0]\n",
            "Preprocessing data...\n",
            "Your data has been encrypted.\n",
            "Decrypted Data (after operations): [20.25, 20.69, 20.91, 20.04, 22.0]\n",
            "Note: The decrypted data may slightly differ from the original due to the approximation nature of the CKKS scheme.\n"
          ]
        }
      ],
      "source": [
        "!pip install TenSEAL\n",
        "import tenseal as ts\n",
        "\n",
        "def create_context_and_keys():\n",
        "\n",
        "    #Initialises a TenSEAL context with CKKS scheme and generates necessary keys.\n",
        "\n",
        "    context = ts.context(ts.SCHEME_TYPE.CKKS, poly_modulus_degree=8192, coeff_mod_bit_sizes=[60, 40, 40, 60])\n",
        "    context.generate_galois_keys()\n",
        "    context.global_scale = 2**40\n",
        "    return context\n",
        "\n",
        "def preprocess_biometric_data(data):\n",
        "    # Example: Assuming the biometric data ranges from 0 to 100.\n",
        "    # Adjust these min and max values based on your actual data range.\n",
        "    min_val = 0\n",
        "    max_val = 100\n",
        "\n",
        "    normalized_data = [(float(i) - min_val) / (max_val - min_val) for i in data]\n",
        "    return normalized_data\n",
        "\n",
        "\n",
        "def encrypt_biometric_data(data, context):\n",
        "\n",
        "    #Encrypts biometric data using the provided TenSEAL context.\n",
        "\n",
        "    encrypted_data = ts.ckks_vector(context, data)\n",
        "    return encrypted_data.serialize()\n",
        "\n",
        "def decrypt_data(encrypted_data, context):\n",
        "\n",
        "    #Decrypts the given encrypted data using the provided TenSEAL context.\n",
        "\n",
        "    encrypted_vector = ts.lazy_ckks_vector_from(encrypted_data)\n",
        "    encrypted_vector.link_context(context)\n",
        "    decrypted_data = encrypted_vector.decrypt()\n",
        "    return [round(num, 2) for num in decrypted_data]\n",
        "\n",
        "def perform_encrypted_operations(encrypted_data, context):\n",
        "\n",
        "    #Performs predefined homomorphic operations on the encrypted data.\n",
        "\n",
        "    encrypted_vector = ts.lazy_ckks_vector_from(encrypted_data)\n",
        "    encrypted_vector.link_context(context)\n",
        "\n",
        "    # Example operations\n",
        "    encrypted_vector.add_(10)\n",
        "    encrypted_vector.mul_(2)\n",
        "\n",
        "    return encrypted_vector.serialize()\n",
        "\n",
        "def input_biometric_data():\n",
        "\n",
        "    #Simulates biometric data capture by allowing the user to input a string of 5 integers.\n",
        "    #Preprocesses the input data for normalization.\n",
        "\n",
        "    print(\"Please enter your biometric data as 5 numbers separated by space (each number represents a biometric point):\")\n",
        "    data = list(map(float, input().split()))\n",
        "    if len(data) != 5:\n",
        "        print(\"Invalid input. Please enter exactly 5 numbers.\")\n",
        "        return input_biometric_data()\n",
        "\n",
        "    # Preprocess (normalize) the input data\n",
        "    preprocessed_data = preprocess_biometric_data(data)\n",
        "    return preprocessed_data\n",
        "\n",
        "\n",
        "# Main Function Demonstrating PPBA System\n",
        "\n",
        "def privacy_preserving_biometric_authentication():\n",
        "    # Step 1: Context and Key Generation\n",
        "    context = create_context_and_keys()\n",
        "    \"\"\"\n",
        "    Creates a secure context for encryption operations. This step generates a cryptographic context and keys\n",
        "    needed for the CKKS scheme in TenSEAL, setting the foundation for privacy-preserving computations on the data.\n",
        "    \"\"\"\n",
        "\n",
        "    # Step 2: User Inputs Biometric Data\n",
        "    fingerprint_data = input_biometric_data()\n",
        "    print(\"Input Fingerprint Data:\", fingerprint_data)\n",
        "    \"\"\"\n",
        "    This section captures the biometric data, which, in a real-world application, would come from biometric sensors\n",
        "    however, due to consrtaints with biometric applications this simulation purposes, users input a string\n",
        "    of 5 integers to represent the biometric data, empthasising the need for accurate and secure data capture.\n",
        "    \"\"\"\n",
        "\n",
        "    print(\"Preprocessing data...\")\n",
        "    \"\"\"\n",
        "    Before encryption, preprocessing the data - also called normilisation - is cruical to ensure the data is in a suitable\n",
        "    form for FHE operations. This step helps aid in maintaining the precision and quality of the biometric data\n",
        "    throughout the encryption and decrpytion processes, creating the privacy-preserving objectives by preparing data securely for\n",
        "    computation.\n",
        "    \"\"\"\n",
        "\n",
        "    # Step 3: Encrypt Biometric Data\n",
        "    encrypted_data = encrypt_biometric_data(fingerprint_data, context)\n",
        "    print(\"Your data has been encrypted.\")\n",
        "    \"\"\"\n",
        "    This is one of the key phases of the system as it converts the simulated biometric data into its encrpyred format,\n",
        "    using the CKKS scheme through the TenSEAL library. Encryption is vital for keeping the data secure and keeping privacy,\n",
        "    as it ensures that sensitive biometric data is transformed into a secure state.\n",
        "    \"\"\"\n",
        "\n",
        "    # Step 4: Perform Homomorphic Operations\n",
        "    encrypted_data_with_operations = perform_encrypted_operations(encrypted_data, context)\n",
        "    \"\"\"\n",
        "    This step performs operations on encrpyed data without decrpyting it showcasing the power of the\n",
        "    Fully Homomorphic Encryption (FHE) techinques. This step allows for computation on biometric data\n",
        "    while keeping the users data secure and private, as the data remains encrpyted even during processing.\n",
        "    \"\"\"\n",
        "\n",
        "    # Step 5: Decrypt Data\n",
        "    decrypted_data = decrypt_data(encrypted_data_with_operations, context)\n",
        "    \"\"\"\n",
        "    After processing, the encrypted data is decrypted back to aform that can be analysed or compared.\n",
        "    This step is crucial for creating insights from encrypted computations, essential in biometric authentication systems\n",
        "    where the outcome of encrypted computations need to be interpreted.\n",
        "    \"\"\"\n",
        "\n",
        "    # Step 6: Compare Results\n",
        "    print(\"Decrypted Data (after operations):\", decrypted_data)\n",
        "    if all(round(original, 2) == round(decrypted, 2) for original, decrypted in zip(fingerprint_data, decrypted_data)):\n",
        "        print(\"Successful: Decrypted output after reversing operations closely matches the original input.\")\n",
        "    else:\n",
        "        print(\"Note: The decrypted data may slightly differ from the original due to the approximation nature of the CKKS scheme.\")\n",
        "    \"\"\"\n",
        "    Comparing the decrpyted data against known templates or thresholds is fundamental in biometric authnetication\n",
        "    systems. This comparison determines if the biometric input matches the stored biometric profile, thus authenticating the user.\n",
        "    \"\"\"\n",
        "\n",
        "    \"\"\"\n",
        "    This check post-decryption emphasises the challenges of working with encrypted biometric data. It showcases\n",
        "    the balance between privacy preservation and the need for accuracy in biometric authentication systems.\n",
        "    The note on potential discrepancies due to CKKS's approximation nature highlights the limitations and characteristics of the scheme.\n",
        "    \"\"\"\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    privacy_preserving_biometric_authentication()\n"
      ]
    }
  ]
}